/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {Interceptor} from '@ciscospark/http-core';
import {SparkHttpError} from '@ciscospark/spark-core';

/**
 * Changes server url when it fails
 */
export default class ServerErrorInterceptor extends Interceptor {
  /**
  * @returns {ServerErrorInterceptor}
  */
  static create() {
    /* eslint no-invalid-this: [0] */
    return new ServerErrorInterceptor({spark: this});
  }


  /**
   * @see Interceptor#onResponseError
   * @param {Object} options
   * @param {Object} reason
   * @returns {Object}
   */
  onResponseError(options, reason) {
    const feature = this.spark.internal.device.features[`developer`].get(`web-ha-messaging`);
    if (feature && feature.value) {
      if (options.uri) {
        if (reason instanceof SparkHttpError.InternalServerError) {
          this.spark.internal.metrics.submitClientMetrics(`web-ha`, {
            fields: {
              success: false
            },
            tags: {
              action: `failed`,
              error: reason.message,
              url: options.uri
            }
          });

          return this.spark.internal.device.markUrlFailedAndGetNew(options.uri)
            .then(() => Promise.reject(reason));
        }
      }
    }
    return Promise.reject(reason);
  }

}
